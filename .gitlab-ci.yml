image: docker:20-dind

variables:
  BYOND_VERSION: ""
  BYOND_MAJOR_VERSION: ""
  BYOND_MINOR_VERSION: ""
  BYOND_BETA_VERSION: ""
  BYOND_BETA_MAJOR_VERSION: ""
  BYOND_BETA_MINOR_VERSION: ""
  DOCKER_MANIFEST_EXISTS: 0
  DOCKER_BETA_MANIFEST_EXISTS: 0

docker-build:
  stage: build
  only:
    - schedules
    - triggers
  artifacts:
    paths:
      - docker.tar
    reports:
      dotenv: build.env
    expire_in: 1 hrs
  before_script:
    - |
      apk update
      apk add curl
  script:
    - |
      echo "Checking for the latest BYOND version..."
      BYOND_VERSION=$(sed -n 1p <(curl https://secure.byond.com/download/version.txt))
      BYOND_MAJOR_VERSION="$(echo "$(cut -d '.' -f 1 <(echo "$BYOND_VERSION"))")"
      BYOND_MINOR_VERSION="$(echo "$(cut -d '.' -f 2 <(echo "$BYOND_VERSION"))")"
      echo "BYOND_VERSION=$BYOND_VERSION" >> build.env
      echo "BYOND_MAJOR_VERSION=$BYOND_MAJOR_VERSION" >> build.env
      echo "BYOND_MINOR_VERSION=$BYOND_MINOR_VERSION" >> build.env

      echo "Logging into the GitLab Container Registry..."
      docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD"

      echo "Checking if this release was already published to the DockerHub Registry..."
      # Disable exit on error (non-zero exit code) to ensure pipelines don't fail when `docker manifest inspect` returns 0
      echo "Disabling exit on error (non-zero exit code)..."
      set +e
      docker manifest inspect "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$BYOND_VERSION"
      if [ $? -eq 0 ]; then
        echo "An existing tag was found!"
        DOCKER_MANIFEST_EXISTS=1
        echo "DOCKER_MANIFEST_EXISTS=$DOCKER_MANIFEST_EXISTS" >> build.env
      fi
      echo "Enabling exit on error (non-zero exit code)..."
      set -e

      if [ "$DOCKER_MANIFEST_EXISTS" -eq 0 ]; then
        echo "Building the Docker images..."
        docker build --build-arg BYOND_MAJOR="$BYOND_MAJOR_VERSION" --build-arg BYOND_MINOR="$BYOND_MINOR_VERSION" \
          -t "$CI_REGISTRY_IMAGE:latest" \
          -t "$CI_REGISTRY_IMAGE:$BYOND_VERSION" \
          -t "$CI_REGISTRY_IMAGE:$BYOND_MAJOR_VERSION" \
          .
        
        echo "Saving the Docker images..."
        docker save --output "$CI_PROJECT_DIR/docker.tar" \
          "$CI_REGISTRY_IMAGE:latest" \
          "$CI_REGISTRY_IMAGE:$BYOND_VERSION" \
          "$CI_REGISTRY_IMAGE:$BYOND_MAJOR_VERSION"
      fi

docker-build-beta:
  stage: build
  only:
    - schedules
    - triggers
  artifacts:
    paths:
      - docker.tar
    reports:
      dotenv: build.env
    expire_in: 1 hrs
  before_script:
    - |
      apk update
      apk add curl
  script:
    - |
      echo "Checking for the latest BYOND beta version..."
      BYOND_BETA_VERSION=$(sed -n 2p <(curl https://secure.byond.com/download/version.txt))
      BYOND_BETA_MAJOR_VERSION="$(echo "$(cut -d '.' -f 1 <(echo "$BYOND_BETA_VERSION"))")"
      BYOND_BETA_MINOR_VERSION="$(echo "$(cut -d '.' -f 2 <(echo "$BYOND_BETA_VERSION"))")"
      echo "BYOND_BETA_VERSION=$BYOND_BETA_VERSION" >> build.env
      echo "BYOND_BETA_MAJOR_VERSION=$BYOND_BETA_MAJOR_VERSION" >> build.env
      echo "BYOND_BETA_MINOR_VERSION=$BYOND_BETA_MINOR_VERSION" >> build.env

      echo "Logging into the GitLab Container Registry..."
      docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD"

      echo "Checking if this beta release was already published to the DockerHub Registry..."
      # Disable exit on error (non-zero exit code) to ensure pipelines don't fail when `docker manifest inspect` returns 0
      echo "Disabling exit on error (non-zero exit code)..."
      set +e
      docker manifest inspect "$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$BYOND_BETA_VERSION-beta"
      if [ $? -eq 0 ]; then
        echo "An existing tag was found!"
        DOCKER_BETA_MANIFEST_EXISTS=1
        echo "DOCKER_BETA_MANIFEST_EXISTS=$DOCKER_BETA_MANIFEST_EXISTS" >> build.env
      fi
      echo "Enabling exit on error (non-zero exit code)..."
      set -e

      if [ "$DOCKER_BETA_MANIFEST_EXISTS" -eq 0 ]; then
        echo "Building the Docker images..."
        docker build --build-arg BYOND_MAJOR="$BYOND_BETA_MAJOR_VERSION" --build-arg BYOND_MINOR="$BYOND_BETA_MINOR_VERSION" \
          -t "$CI_REGISTRY_IMAGE:beta" \
          -t "$CI_REGISTRY_IMAGE:$BYOND_BETA_VERSION-beta" \
          -t "$CI_REGISTRY_IMAGE:$BYOND_BETA_MAJOR_VERSION-beta" \
          .
        
        echo "Saving the Docker images..."
        docker save --output "$CI_PROJECT_DIR/docker.tar" \
          "$CI_REGISTRY_IMAGE:beta" \
          "$CI_REGISTRY_IMAGE:$BYOND_BETA_VERSION-beta" \
          "$CI_REGISTRY_IMAGE:$BYOND_BETA_MAJOR_VERSION-beta"
      fi

publish:
  stage: build
  needs: ["docker-build"]
  dependencies:
    - docker-build
  only:
    - schedules
    - triggers
  script:
    - |
      if [ "$DOCKER_MANIFEST_EXISTS" -eq 0 ]; then
        echo "Logging into the GitLab Container Registry..."
        docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD"

        echo "Loading the Docker images..."
        docker load --input "$CI_PROJECT_DIR/docker.tar"

        echo "Publishing the Docker images to the GitLab Container Registry..."
        docker push "$CI_REGISTRY_IMAGE:$BYOND_VERSION"
        docker push "$CI_REGISTRY_IMAGE:$BYOND_MAJOR_VERSION"
        docker push "$CI_REGISTRY_IMAGE:latest"
      else
        echo "This docker image already exists in the Docker Registry..."
        echo "The publish job has been skipped."
      fi

publish-beta:
  stage: build
  needs: ["docker-build-beta"]
  dependencies:
    - docker-build-beta
  only:
    - schedules
    - triggers
  script:
    - |
      if [ "$DOCKER_BETA_MANIFEST_EXISTS" -eq 0 ]; then
        echo "Logging into the GitLab Container Registry..."
        docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD"

        echo "Loading the Docker images..."
        docker load --input "$CI_PROJECT_DIR/docker.tar"

        echo "Publishing the Docker images to the GitLab Container Registry..."
        docker push "$CI_REGISTRY_IMAGE:$BYOND_BETA_VERSION-beta"
        docker push "$CI_REGISTRY_IMAGE:$BYOND_BETA_MAJOR_VERSION-beta"
        docker push "$CI_REGISTRY_IMAGE:beta"
      else
        echo "This docker image already exists in the Docker Registry..."
        echo "The publish job has been skipped."
      fi
      